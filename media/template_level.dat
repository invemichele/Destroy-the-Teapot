File: template_level.dat
A few small rules for creating a properly working level file.

General indication to write a template:
You have to decide if you want a single player or two players and put the level*.dat file in the right folder (1Player, 2Player or Network).
Important: the program doesn't read the lines preceded by #, so you can use it to comment lines

The first data of the file is the kind of level.
Kind of levels available: 
1  Earth
2  Moon
3  Open space
4  Laboratory (CAUTION: the lateral walls have to be physical objects, so remember to add them if you want them!)

External forces: at the beginning of the level file you can put the values of the external forces in this order
	gravity.x	gravity.y 	gravity.z	electric.x	electric.y	electric.z	magnetic.x	magnetic.y	magnetic.z

Attention: you don't have to put gravity if you put an object with earth's physics properties (the gravity is generated by the object!)

IMPORTANT: Depending on which folder you choose the system recognizes how many cannons it has to load. The first object of ball kind (or the first two for 2 player) are read as the cannonball, so don't put the earth first because you can't shoot it!

Kind of object available:
0  Ball
1  Teapot
2  Cannon
3  Ufo
10 Wall

Each object has different template because of its specific behavior, but every object is a physical_object so it needs:
	kind	mass	pos.x	pos.y	pos.z	vel.x	vel.y	vel.z	charge	anelas	fixed	ghost	red	green	blue

If is also a spherical_object (only walls aren't spherical) needs another number after those: 
	radius

Ball: doesn't need anything more. Remember to put the cannonballs at the beginning. You can leave the position of the cannonball to (0,0,0) since it is automatically changed so that it stays inside the cannon barrel. Use negative velocity for the recoil effect.

Teapot: doesn't need anything more. The last teapot in the file will be the one to be destroyed.

Cannon: needs the usual data and 2 more data that are azimuth and elevation of the cannon barrel.
kind	mass	pos.x	pos.y	pos.z	vel.x	vel.y	vel.z	charge	anelas	fixed	ghost	red green blue	radius	azimuth	elevation

Ufo: doesn't need anything more

Wall: the most complex object, there are 4 3Dvector of position that are the 4 corner-points of the wall, because of the graphic system you have to draw it (and so write it) in the right order (clockwise or counterclockwise). The 4 corner-points must draw a rectangle and of course must be on a plane. This is the only object that is not a spherical-object so it doesn't need radius
kind	mass	pos.x1	pos.y1	pos.z1	vel.x	vel.y	vel.z	charge	anelas	fixed	ghost	red	green	blue  pos.x2	pos.y2	pos.z2 pos.x3	pos.y3	pos.z3 pos.x4	pos.y4	pos.z4


Here the sample of the simplest level we have done.

##level 0: Earth gravity with a falling and bouncing teapot
##world kind
0

##external gravity field and electric field: 

#[gravity.x	gravity.y 	gravity.z	electric.x	electric.y	electric.z	magnetic.x	magnetic.y	magnetic.z]
  0		0		0		0		0		0		0		0		0

##list of objects (false=0 true=1):
#[kind	mass	pos.x	pos.y	pos.z	vel.x	vel.y	vel.z	charge	anelas	fixed	ghost	red	green	blue	(radius)] 

#[0]teapot
1	0.02	4	3.5	0	0	0	0	0	0	0	0	255	255	255	0.2

#[1]P1 cannonball
0	0.05	0	0	0	-10	0	0	0	0	0	0	255	128	0	0.1 

#[2]P1 cannon
2	30	-6.5	0.5	0	0	0	0	0	0	0	0	139	90	0	0.5	0	0

#[5]earth
0	5.9742e24  0	-6.3728e6  0	0	0	0	0	0	0	0	0	0	0	6.3728e6 
